"""
Django settings for gar_loader project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from typing import Tuple, Union

TEST = len(sys.argv) > 1 and sys.argv[1] == "test"
GITHUB_ACTIONS = os.environ.get("GITHUB_ACTIONS", False)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-4og8m00lqkpy4f^5_z3k6l(qb$ymoy(ri)huyo+i@^2yv^ild@"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # "django.contrib.admin",
    # "django.contrib.auth",
    # "django.contrib.contenttypes",
    # "django.contrib.sessions",
    # "django.contrib.messages",
    # "django.contrib.staticfiles",
    "fias",
    "target",
]

# MIDDLEWARE = [
# "django.middleware.security.SecurityMiddleware",
# "django.contrib.sessions.middleware.SessionMiddleware",
# "django.middleware.common.CommonMiddleware",
# "django.middleware.csrf.CsrfViewMiddleware",
# "django.contrib.auth.middleware.AuthenticationMiddleware",
# "django.contrib.messages.middleware.MessageMiddleware",
# "django.middleware.clickjacking.XFrameOptionsMiddleware",
# ]

ROOT_URLCONF = "gar_loader.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gar_loader.wsgi.application"

FIAS_DATABASE_ALIAS = "gar"
TARGET_DATABASE_ALIAS = FIAS_DATABASE_ALIAS

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_ROUTERS = [
    "fias.routers.FIASRouter",
    "target.routers.TargetRouter",
]

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
    "gar": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "gar",
        "USER": "gar_test",
        "PASSWORD": "gar_test",
        "HOST": "127.0.0.1",
        "PORT": "5432",
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ru-RU"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

STATIC_URL = "static/"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(asctime)s:%(name)s:%(process)d:%(lineno)d " "%(levelname)s %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "formatter": "default",
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
        },
        "console_err": {
            "level": "ERROR",
            "formatter": "default",
            "class": "logging.StreamHandler",
            "stream": sys.stderr,
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "fias": {
            "handlers": ["console", "console_err"],
            "level": "DEBUG",
        },
        "target": {
            "handlers": ["console", "console_err"],
            "level": "DEBUG",
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
    },
}

# You can remove it at all, if there is unrar (or unrar.exe in MS Windows) in globals.
if not GITHUB_ACTIONS:
    FIAS_UNRAR_TOOL = Path(r"G:\Program Files\WinRAR\UnRAR.exe")

_FRT = Union[Tuple[str, ...], str]
# Region for processing: tuple of two-digits string or "__all__".
FIAS_REGIONS: _FRT = "__all__"
# FIAS_REGIONS: _FRT = ("87", "99")

_FHT = Union[Tuple[int, ...], str]
# House types for processing or "__all__".
# FIAS_HOUSE_TYPES: _FRT = "__all__"
FIAS_HOUSE_TYPES: _FHT = (2, 5, 7, 10)

# If true, django will create target tables in migrations.
TARGET_MANAGE: bool = True
